{"version":3,"sources":["components/Gallery/gallery.js","components/Reception/location.js","components/RSVP/rsvp.js","components/Story/story.js","components/Navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","Location","RSVP","Story","Home","Navbar","id","to","path","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAWeA,MARf,WACI,OACI,6BACI,+C,MCKGC,MARf,WACI,OACI,6BACI,mD,MCKGC,MARf,WACI,OACI,6BACI,+C,MCKGC,MARf,WACI,OACI,6BACI,gD,cCgDZ,SAASC,IACR,OAAO,oCAGOC,MAhDf,WACI,OACF,kBAAC,IAAD,KACC,yBAAKC,GAAG,WACP,4BACC,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAED,wBAAID,GAAG,aACN,4BACC,kBAAC,IAAD,CAAMC,GAAG,UAAT,cAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,cAAT,gBAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,SAAT,WAKH,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,UACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,cACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,WACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,SACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,KACX,kBAACJ,EAAD,UChCUK,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,+CCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e046aa01.chunk.js","sourcesContent":["import React from 'react'\nimport './gallery.css'\n\nfunction Gallery() {\n    return (\n        <div>\n            <p>Photos go here</p>\n        </div>\n    )\n}\n\nexport default Gallery","import React from 'react'\nimport './location.css'\n\nfunction Location() {\n    return (\n        <div>\n            <p>Location goes here</p>\n        </div>\n    )\n}\n\nexport default Location","import React from 'react'\nimport './rsvp.css'\n\nfunction RSVP() {\n    return (\n        <div>\n            <p>RSVP goes here</p>\n        </div>\n    )\n}\n\nexport default RSVP","import React from 'react'\nimport './story.css'\n\nfunction Story() {\n    return (\n        <div>\n            <p>Story goes here</p>\n        </div>\n    )\n}\n\nexport default Story","import React from 'react';\nimport './navbar.css';\n\nimport Gallery from '../Gallery/gallery'\nimport Reception from '../Reception/location'\nimport RSVP from '../RSVP/rsvp'\nimport Story from '../Story/story'\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction Navbar() {\n    return (\n\t\t<Router>\n\t\t\t<nav id=\"nav-bar\">\n\t\t\t\t<h3>\n\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t</h3>\n\t\t\t\t<ul id=\"nav-links\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/story\">Our Story</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/reception\">The Wedding</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/photos\">Photos</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/rsvp\">RSVP</Link>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t\t\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/story\">\n\t\t\t\t\t<Story />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/reception\">\n\t\t\t\t\t<Reception />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/photos\">\n\t\t\t\t\t<Gallery />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/rsvp\">\n\t\t\t\t\t<RSVP />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t<Home />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n    )\n}\n\nfunction Home() {\n\treturn <h2>Home</h2>;\n}\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar/navbar';\n// import BGVideo from './components/BG-Video/bg-video';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <p>Home goes here</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}